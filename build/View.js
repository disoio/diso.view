// Generated by CoffeeScript 1.3.3
(function() {
  var $, Type, Uuid, VIEW_REGEX, View;

  $ = require('jquery');

  Uuid = require('node-uuid');

  Type = require('type-of-is');

  VIEW_REGEX = (function() {
    var regex_str;
    regex_str = "^(\\s*<[\\w][\\w0-9]*)";
    return new RegExp(regex_str, 'm');
  })();

  View = (function() {

    View.BEHAVIOR_ATTR = 'data-behavior';

    View.ID_ATTR_NAME = 'id';

    function View(data) {
      var _ref;
      this.data = data;
      if ((_ref = this.data) == null) {
        this.data = {};
      }
      this.id = Uuid.v4();
      this.subviews = {};
    }

    View.prototype.idMap = function() {
      var id, map, subview, _ref;
      map = {};
      _ref = this.subviews;
      for (id in _ref) {
        subview = _ref[id];
        map[id] = subview.idMap();
      }
      return map;
    };

    View.prototype.behavior = function(value) {
      var attr;
      attr = "" + this.constructor.BEHAVIOR_ATTR + "-" + this.id;
      if (value) {
        return "" + attr + "=\"" + value + "\"";
      } else {
        return attr;
      }
    };

    View.prototype.ns = function(event_name) {
      return "" + event_name + "." + this.id;
    };

    View.prototype.idAttr = function() {
      return "" + this.constructor.ID_ATTR_NAME + "=\"" + this.id + "\"";
    };

    View.prototype.run = function() {};

    View.prototype.addSubview = function(subview) {
      if (!(subview.id in this.subviews)) {
        return this.subviews[subview.id] = subview;
      }
    };

    View.prototype.addSubviews = function(subviews) {
      var view, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = subviews.length; _i < _len; _i++) {
        view = subviews[_i];
        _results.push(this.addSubview(view));
      }
      return _results;
    };

    View.prototype.removeSubview = function(subview) {
      if (subview.id in this.subviews) {
        return delete this.subviews[view.id];
      }
    };

    View.prototype.removeSubviews = function(subviews) {
      var view, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = subviews.length; _i < _len; _i++) {
        view = subviews[_i];
        _results.push(this.removeSubview(view));
      }
      return _results;
    };

    View.prototype.setId = function(id) {
      this.id = id;
      return this.$container = $("#" + this.id);
    };

    View.prototype.sync = function(id_map) {
      var i, id, ids, map, temp_id, temp_ids, view, _i, _ref;
      this.addBehaviors();
      ids = Object.keys(id_map);
      temp_ids = Object.keys(this.subviews);
      if (ids.length !== temp_ids.length) {
        throw "Mismatch between subview id lengths";
      }
      for (i = _i = 0, _ref = ids.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        id = ids[i];
        map = id_map[id];
        temp_id = temp_ids[i];
        view = this.subviews[temp_id];
        if (view) {
          view.setId(id);
          view.sync(map);
        }
      }
      return this.run();
    };

    View.prototype.addBehaviors = function() {
      var $node, attr, behaviors, node, _i, _len, _results;
      attr = this.behavior();
      behaviors = this.$container.find("[" + attr + "]");
      _results = [];
      for (_i = 0, _len = behaviors.length; _i < _len; _i++) {
        node = behaviors[_i];
        $node = $(node);
        _results.push(this.addBehavior($node));
      }
      return _results;
    };

    View.prototype.addBehavior = function($node) {
      var attr, event_name, handler, handler_name, value, _ref;
      attr = this.behavior();
      value = $node.attr(attr);
      _ref = value.split(':'), event_name = _ref[0], handler_name = _ref[1];
      if (handler_name in this) {
        event_name = this.ns(event_name);
        handler = this[handler_name];
        return $node.on(event_name, handler);
      }
    };

    View.prototype.template = function() {
      return '<h1>You should probably define .template on your view</h1>';
    };

    View.prototype.html = function() {
      var html;
      html = this.template();
      return this.addViewId(html);
    };

    View.prototype.addViewId = function(html) {
      return html.replace(VIEW_REGEX, "$1 " + (this.idAttr()));
    };

    View.prototype.json = function() {
      return JSON.stringify(this.data);
    };

    return View;

  })();

  module.exports = View;

}).call(this);
