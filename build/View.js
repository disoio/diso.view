// Generated by CoffeeScript 1.3.3
(function() {
  var $, Uuid, View, regexForDomId;

  $ = require('jquery');

  Uuid = require('node-uuid');

  regexForDomId = function(dom_id) {
    var regex, regex_str;
    regex_str = "(<[\\w\\s]*?id=\"" + dom_id + "\"[^>]*)>";
    return regex = new RegExp(regex_str, 'm');
  };

  View = (function() {

    View.BEHAVIOR_ATTR = 'data-behavior';

    View.VIEW_ID_ATTR = 'data-view-id';

    View.prototype.behavior = function(value) {
      var attr;
      attr = "" + this.constructor.BEHAVIOR_ATTR + "-" + this.id;
      if (value) {
        return "" + attr + "=\"" + value + "\"";
      } else {
        return attr;
      }
    };

    function View(data) {
      var _ref;
      this.data = data;
      if ((_ref = this.data) == null) {
        this.data = {};
      }
      this.id = Uuid.v4();
      this.subviews = {};
      this.container_dom_id = null;
    }

    View.prototype.run = function() {};

    View.prototype.contains = function(options) {
      return this.subviews[options.view.id] = options;
    };

    View.prototype.contained = function(options) {
      this.container_dom_id = options.dom_id;
      this.$container = $("#" + this.container_dom_id);
      return this.id = this.$container.attr(this.constructor.VIEW_ID_ATTR);
    };

    View.prototype.sync = function() {
      var id, subview, view, _ref;
      this.addBehaviors();
      _ref = this.subviews;
      for (id in _ref) {
        subview = _ref[id];
        view = subview.view;
        view.contained({
          dom_id: subview.dom_id
        });
        view.sync();
      }
      return this.run();
    };

    View.prototype.ns = function(event_name) {
      return "" + event_name + "." + this.id;
    };

    View.prototype.addBehaviors = function() {
      var $node, attr, behaviors, node, _i, _len, _results;
      attr = this.behavior();
      behaviors = this.$container.find("[" + attr + "]");
      _results = [];
      for (_i = 0, _len = behaviors.length; _i < _len; _i++) {
        node = behaviors[_i];
        $node = $(node);
        _results.push(this.addBehavior($node));
      }
      return _results;
    };

    View.prototype.addBehavior = function($node) {
      var attr, event_name, handler, handler_name, value, _ref;
      attr = this.behavior();
      value = $node.attr(attr);
      _ref = value.split(':'), event_name = _ref[0], handler_name = _ref[1];
      if (handler_name in this) {
        event_name = this.ns(event_name);
        handler = this[handler_name];
        return $node.on(event_name, handler);
      }
    };

    View.prototype.template = function() {
      return '<h1>You should probably define .template on your view</h1>';
    };

    View.prototype.html = function() {
      var html;
      html = this.template();
      return this.populateSubviews(html);
    };

    View.prototype.populateSubviews = function(html) {
      var id, regex, subview, view, view_html, _ref;
      _ref = this.subviews;
      for (id in _ref) {
        subview = _ref[id];
        view = subview.view;
        view_html = view.html();
        regex = regexForDomId(subview.dom_id);
        html = html.replace(regex, "$1 " + this.constructor.VIEW_ID_ATTR + "=\"" + id + "\">" + view_html);
      }
      return html;
    };

    View.prototype.json = function() {
      return JSON.stringify(this.data);
    };

    return View;

  })();

  module.exports = View;

}).call(this);
